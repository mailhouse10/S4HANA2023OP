*&---------------------------------------------------------------------*
*& Report z1pitd_material_migration
*&---------------------------------------------------------------------*
*&This Utility Program will fetch All of the Material Data from Source System
*&Post the data to the target system using the V2 Odata API_PRODUCT_SRV
*&---------------------------------------------------------------------*
REPORT z1pitd_material_migration.

PARAMETERS:
  p_matnr TYPE string,
  p_werks TYPE string,
  p_surl  TYPE string LOWER CASE,
  p_suser TYPE string LOWER CASE,
  p_spwd  TYPE string LOWER CASE,
  p_durl  TYPE string LOWER CASE,
  p_duser TYPE string LOWER CASE,
  p_dpwd  TYPE string LOWER CASE.

"=====================================================================
" Entity Configuration Type
"=====================================================================
TYPES: BEGIN OF ts_entity_config,
         entity_set   TYPE string,
         entity_type  TYPE string,
         filter_param TYPE string,
         is_multikey  TYPE abap_bool,
       END OF ts_entity_config,
       tt_entity_config TYPE TABLE OF ts_entity_config.

"=====================================================================
" Entity Configuration Manager Class
"=====================================================================
CLASS lcl_config_manager DEFINITION.
  PUBLIC SECTION.
    METHODS constructor
      IMPORTING ps_matnr TYPE string
                ps_werks TYPE string.
    METHODS get_configs
      EXPORTING
        et_configs TYPE tt_entity_config.
  PRIVATE SECTION.
    DATA: mv_matnr TYPE string,
          mv_werks TYPE string.
ENDCLASS.

CLASS lcl_config_manager IMPLEMENTATION.
  METHOD constructor.
    mv_matnr = ps_matnr.
    mv_werks = ps_werks.
  ENDMETHOD.

  METHOD get_configs.
    DATA: ls_config TYPE ts_entity_config.

    "A_Product
    ls_config-entity_set = 'A_Product'.
    ls_config-filter_param = |('{ mv_matnr }')| &&
      |?$expand=to_Description,to_ProductBasicText,to_ProductInspectionText,to_ProductProcurement,| &&
      |to_ProductPurchaseText,to_ProductQualityMgmt,to_ProductSales,to_ProductSalesTax,| &&
      |to_ProductStorage,to_ProductUnitsOfMeasure,to_SalesDelivery&$format=json|.
    ls_config-is_multikey = abap_false.
    INSERT ls_config INTO TABLE et_configs.

    "A_ProductValuation
    CLEAR ls_config.
    ls_config-entity_set = 'A_ProductValuation'.
    ls_config-filter_param = |(Product='{ mv_matnr }',ValuationArea='{ mv_werks }',ValuationType='')?$format=json|.
    ls_config-is_multikey = abap_true.
    INSERT ls_config INTO TABLE et_configs.

    "A_ProductPlant
    CLEAR ls_config.
    ls_config-entity_set = 'A_ProductPlant'.
    ls_config-filter_param = |(Product='{ mv_matnr }',Plant='{ mv_werks }')| &&
      |?$expand=to_PlantMRPArea,to_PlantQualityMgmt,to_PlantSales,to_PlantStorage,| &&
      |to_PlantText,to_ProdPlantInternationalTrade,to_ProductPlantCosting,| &&
      |to_ProductPlantForecast,to_ProductPlantProcurement,to_ProductSupplyPlanning,| &&
      |to_ProductWorkScheduling,to_StorageLocation&$format=json|.
    ls_config-is_multikey = abap_true.
    INSERT ls_config INTO TABLE et_configs.
  ENDMETHOD.
ENDCLASS.

"=====================================================================
" Main Logic Class
"=====================================================================
CLASS lcl_main DEFINITION.
  PUBLIC SECTION.
    TYPES: BEGIN OF ty_out,
             werks      TYPE werks_d,
             matnr      TYPE matnr,
             entity_set TYPE string,
             get_msg    TYPE string,
             post_msg   TYPE string,
             severity   TYPE string,
           END OF ty_out.
    METHODS: get
      IMPORTING iv_entity_set   TYPE string
                iv_filter_param TYPE string
      CHANGING  cs_out          TYPE ty_out

      RETURNING VALUE(rv_json)  TYPE string
      RAISING   cx_root,
      post
        IMPORTING iv_entity_set TYPE string
                  iv_json       TYPE string
        CHANGING  cs_out        TYPE ty_out
        RAISING   cx_root,
      execute
        IMPORTING iv_surl  TYPE string
                  iv_suser TYPE string
                  iv_spwd  TYPE string
                  iv_durl  TYPE string
                  iv_duser TYPE string
                  iv_dpwd  TYPE string,
      parse_respone
        IMPORTING iv_responsexml TYPE string
                  iv_method      TYPE string
        CHANGING  cs_out         TYPE ty_out.

    DATA: mv_out TYPE STANDARD TABLE OF ty_out WITH DEFAULT KEY.

  PRIVATE SECTION.
    DATA: mv_surl  TYPE string,
          mv_suser TYPE string,
          mv_spwd  TYPE string,
          mv_durl  TYPE string,
          mv_duser TYPE string,
          mv_dpwd  TYPE string.


ENDCLASS.

"=====================================================================
" Implementation
"=====================================================================
CLASS lcl_main IMPLEMENTATION.

  METHOD execute.
    mv_surl  = iv_surl.
    mv_suser = iv_suser.
    mv_spwd  = iv_spwd.
    mv_durl  = iv_durl.
    mv_duser = iv_duser.
    mv_dpwd  = iv_dpwd.

    DATA: lo_config_mgr TYPE REF TO lcl_config_manager,
          lt_configs    TYPE tt_entity_config,
          ls_config     TYPE ts_entity_config,
          ls_out        TYPE ty_out.

    CREATE OBJECT lo_config_mgr
      EXPORTING
        ps_matnr = p_matnr
        ps_werks = p_werks.

    lo_config_mgr->get_configs( IMPORTING et_configs = lt_configs ).

    LOOP AT lt_configs INTO ls_config.
      ls_out-werks = p_werks.
      ls_out-matnr = p_matnr.
      ls_out-entity_set = ls_config-entity_set.
      TRY.
          CALL METHOD get
            EXPORTING
              iv_entity_set   = ls_config-entity_set
              iv_filter_param = ls_config-filter_param
            CHANGING
              cs_out          = ls_out
            RECEIVING
              rv_json         = DATA(lv_json).
        CATCH cx_root INTO DATA(lo_error).
          ls_out-get_msg = |GET Exception: { lo_error->get_text( ) }|.
          ls_out-severity = 'E'.
          APPEND ls_out TO mv_out.
          EXIT.
      ENDTRY.
      IF ls_out-severity = 'E' OR ls_out-severity = 'error'.
        APPEND ls_out TO mv_out.
        EXIT.
      ENDIF.
      TRY.
          CALL METHOD post
            EXPORTING
              iv_entity_set = ls_config-entity_set
              iv_json       = lv_json
            CHANGING
              cs_out        = ls_out.
        CATCH cx_root INTO lo_error.
          ls_out-post_msg = |POST Exception: { lo_error->get_text( ) }|.
          ls_out-severity = 'E'.
          APPEND ls_out TO mv_out.
          EXIT.
      ENDTRY.
      IF ls_out-severity = 'E' OR ls_out-severity = 'error'.
        APPEND ls_out TO mv_out.
        EXIT.
      ENDIF.
      APPEND ls_out TO mv_out.
      CLEAR ls_out.
    ENDLOOP.
  ENDMETHOD.

  METHOD get.
    DATA: lo_http_client TYPE REF TO if_http_client,
          lo_rest_client TYPE REF TO cl_rest_http_client,
          lo_entity      TYPE REF TO if_rest_entity,
          lv_url         TYPE string,
          lv_http_status TYPE string,
          lv_response    TYPE string.

    lv_url = |{ mv_surl }/{ iv_entity_set }{ iv_filter_param }|.

    cl_http_client=>create_by_url(
      EXPORTING url = lv_url
      IMPORTING client = lo_http_client ).

    lo_http_client->authenticate( username = mv_suser password = mv_spwd ).
    lo_http_client->propertytype_accept_cookie = if_http_client=>co_enabled.

    lo_rest_client = NEW cl_rest_http_client( io_http_client = lo_http_client ).
    lo_rest_client->if_rest_client~set_request_header( iv_name = 'Accept' iv_value = 'application/json' ).
    lo_rest_client->if_rest_client~get( ).

    lo_entity = lo_rest_client->if_rest_client~get_response_entity( ).
    lv_http_status = lo_entity->get_header_field( '~status_code' ).
    lv_response    = lo_entity->get_string_data( ).

    CASE lv_http_status.
      WHEN '200' OR '201'.
        rv_json = lv_response.
        cs_out-get_msg = 'GET successful'.
        cs_out-severity = 'S'.
      WHEN '400' OR '401' OR '403' OR '404' OR '500'.
        parse_respone(
            EXPORTING iv_responsexml = lv_response iv_method = 'GET'
            CHANGING  cs_out          = cs_out ).
      WHEN OTHERS.
        cs_out-get_msg = |Unexpected Error: { lv_http_status }|.
        cs_out-severity = 'E' .
    ENDCASE.

    lo_rest_client->if_rest_client~close( ).
  ENDMETHOD.

  METHOD post.
    DATA: lo_http_client   TYPE REF TO if_http_client,
          lo_rest_client   TYPE REF TO cl_rest_http_client,
          lo_entity        TYPE REF TO if_rest_entity,
          lo_request       TYPE REF TO if_rest_entity,
          lo_response      TYPE REF TO if_rest_entity,
          lv_http_status   TYPE string,
          lv_json_response TYPE string.

    cl_http_client=>create_by_url(
      EXPORTING url = mv_durl
      IMPORTING client = lo_http_client ).

    lo_http_client->authenticate( username = mv_duser password = mv_dpwd ).
    lo_http_client->propertytype_accept_cookie = if_http_client=>co_enabled.

    lo_rest_client = NEW cl_rest_http_client( io_http_client = lo_http_client ).

    " Fetch CSRF token
    lo_rest_client->if_rest_client~set_request_header( iv_name = 'x-csrf-token' iv_value = 'fetch' ).
    lo_rest_client->if_rest_client~set_request_header( iv_name = 'sap-client' iv_value = '300' ).
    lo_rest_client->if_rest_client~get( ).

    lo_entity = lo_rest_client->if_rest_client~get_response_entity( ).
    lv_http_status = lo_entity->get_header_field( '~status_code' ).
    CASE lv_http_status.
      WHEN '201' OR '200'.
*        APPEND VALUE #( matnr = p_matnr werks = p_werks post_msg = 'Get successful' severity = 'S' ) TO mv_out.
      WHEN '400' OR '401' OR '403' OR '409' OR '500'.
        parse_respone(
            EXPORTING iv_responsexml = lv_json_response iv_method = 'POST'
            CHANGING  cs_out          = cs_out ).
        RETURN.
      WHEN OTHERS.
        cs_out-post_msg = |Unexpected Error: x-csrf_token fetch-{ lv_http_status }|.
        cs_out-severity = 'E'.
        RETURN.
    ENDCASE.

    " Prepare POST
    lo_request = lo_rest_client->if_rest_client~create_request_entity( ).
    lo_request->set_string_data( iv_json ).
    DATA(lv_url) = |{ mv_durl }/{ iv_entity_set }|.
    lo_request->set_header_field( iv_name = 'content-type' iv_value = 'application/json; charset=utf-8' ).
    lo_request->set_header_field( iv_name = 'accept' iv_value = 'application/json' ).
    lo_request->set_header_field( iv_name = 'sap-client' iv_value = '300' ).
    lo_request->set_header_field( iv_name = '~request_uri' iv_value = lv_url ).
    lo_request->set_header_field( iv_name = 'X-CSRF-Token' iv_value = lo_entity->get_header_field( 'x-csrf-token' ) ).

    " 5. Execute POST request
    lo_rest_client->if_rest_client~post( io_entity = lo_request ).
    " 6. Get response entity
    lo_response = lo_rest_client->if_rest_client~get_response_entity( ).
    lv_json_response = lo_response->get_string_data( ).
    CLEAR lv_http_status.
    lv_http_status = lo_response->get_header_field( '~status_code' ).
    CASE lv_http_status.
      WHEN '201' OR '200'.
        cs_out-post_msg = 'POST successful'.
        cs_out-severity = 'S'.
      WHEN '400' OR '401' OR '403' OR '409' OR '500'.
        parse_respone(
            EXPORTING iv_responsexml = lv_json_response iv_method = 'POST'
            CHANGING  cs_out          = cs_out ).
      WHEN OTHERS.
        cs_out-post_msg = |Unexpected Error: { lv_http_status }|.
        cs_out-severity = 'E'.
    ENDCASE.
    lo_rest_client->if_rest_client~close( ).
  ENDMETHOD.

  METHOD parse_respone.
    DATA: lv_xml_string   TYPE string,
          lo_ixml         TYPE REF TO if_ixml,
          lo_stream_fact  TYPE REF TO if_ixml_stream_factory,
          lo_istream      TYPE REF TO if_ixml_istream,
          lo_document     TYPE REF TO if_ixml_document,
          lo_parser       TYPE REF TO if_ixml_parser,
          lo_root         TYPE REF TO if_ixml_element,
          lo_innererror   TYPE REF TO if_ixml_element,
          lo_errordetails TYPE REF TO if_ixml_element,
          lo_errordetail  TYPE REF TO if_ixml_element,
          lo_child        TYPE REF TO if_ixml_node,
          lv_code         TYPE string,
          lv_message      TYPE string,
          lv_severity     TYPE string.
    TYPES: BEGIN OF ty_json_message,
             lang  TYPE string,
             value TYPE string,
           END OF ty_json_message.

    TYPES: BEGIN OF ty_json_error,
             code       TYPE string,
             message    TYPE ty_json_message,
             innererror TYPE string, "ignored
           END OF ty_json_error.

    TYPES: BEGIN OF ty_json_root,
             error TYPE ty_json_error,
           END OF ty_json_root.

    DATA: ls_data TYPE ty_json_root.
    " Detect JSON vs XML (simple heuristic)
    IF iv_responsexml CS '{' AND iv_responsexml CS 'error'.
      "---------------------------------------------------------------
      " JSON Parsing using /UI2/CL_JSON
      "---------------------------------------------------------------
      TRY.
          /ui2/cl_json=>deserialize(
            EXPORTING json = iv_responsexml
            CHANGING  data = ls_data ).
          IF iv_method = 'GET'.
            cs_out-get_msg = ls_data-error-message-value.
            cs_out-severity = 'E'.
          ELSE.
            cs_out-post_msg = ls_data-error-message-value.
            cs_out-severity = 'E'.
          ENDIF.
        CATCH cx_root INTO DATA(lx_json_error).
          IF iv_method = 'GET'.
            cs_out-get_msg = lx_json_error->get_text( ).
            cs_out-severity = 'E'.
          ELSE.
            cs_out-post_msg = lx_json_error->get_text( ).
            cs_out-severity = 'E'.
          ENDIF.
      ENDTRY.
      RETURN.
    ENDIF.
*Backup Code for XML Parsing
    "--- Create iXML environment and parser
    lo_ixml        = cl_ixml=>create( ).
    lo_stream_fact = lo_ixml->create_stream_factory( ).
    lo_istream     = lo_stream_fact->create_istream_string( iv_responsexml ).
    lo_document    = lo_ixml->create_document( ).

    lo_parser = lo_ixml->create_parser(
                   document       = lo_document
                   istream        = lo_istream
                   stream_factory = lo_stream_fact ).

    IF lo_parser->parse( ) <> 0 OR lo_parser->num_errors( ) > 0.
      IF iv_method = 'GET'.
        cs_out-get_msg = 'Response Parsing Failed'.
        cs_out-severity = 'E'.
      ELSE.
        cs_out-post_msg = 'Response Parsing Failed'.
        cs_out-severity = 'E'.
      ENDIF.
      RETURN.
    ENDIF.

    "--- Get root <error> element
    lo_root = lo_document->get_root_element( ).
    IF lo_root IS INITIAL.
      IF iv_method = 'GET'.
        cs_out-get_msg = 'Response Parsing Failed-Root Missing'.
        cs_out-severity = 'E'.
      ELSE.
        cs_out-post_msg = 'Response Parsing Failed-Root Missing'.
        cs_out-severity = 'E'.
      ENDIF.
      RETURN.
    ENDIF.

    "--- Find <innererror> by looping children of <error>
    DATA(lo_node) = lo_root->get_first_child( ).
    WHILE lo_node IS NOT INITIAL.
      IF lo_node->get_type( ) = if_ixml_node=>co_node_element AND
         lo_node->get_name( ) = 'innererror'.
        lo_innererror ?= lo_node.
        EXIT.
      ENDIF.
      lo_node = lo_node->get_next( ).
    ENDWHILE.

    IF lo_innererror IS INITIAL.
      IF iv_method = 'GET'.

        cs_out-get_msg = 'Response Parsing Failed-innererror node Missing'.
        cs_out-severity = 'E'.
      ELSE.

        cs_out-post_msg = 'Response Parsing Failed-innererror node Missing'.
        cs_out-severity = 'E'.
      ENDIF.
      RETURN.
    ENDIF.

    "--- Find <errordetails> inside <innererror>
    lo_node = lo_innererror->get_first_child( ).
    WHILE lo_node IS NOT INITIAL.
      IF lo_node->get_type( ) = if_ixml_node=>co_node_element AND
         lo_node->get_name( ) = 'errordetails'.
        lo_errordetails ?= lo_node.
        EXIT.
      ENDIF.
      lo_node = lo_node->get_next( ).
    ENDWHILE.

    IF lo_errordetails IS INITIAL.
      IF iv_method = 'GET'.
        cs_out-get_msg = 'Response Parsing Failed-errordetails node Missing'.
        cs_out-severity = 'E'.
      ELSE.
        cs_out-post_msg = 'Response Parsing Failed-errordetails node Missing'.
        cs_out-severity = 'E'.
      ENDIF.
      RETURN.
    ENDIF.

    "--- Loop through <errordetail> elements
    lo_node = lo_errordetails->get_first_child( ).
    WHILE lo_node IS NOT INITIAL.

      IF lo_node->get_type( ) = if_ixml_node=>co_node_element AND
         lo_node->get_name( ) = 'errordetail'.

        lo_errordetail ?= lo_node.
        CLEAR: lv_code, lv_message, lv_severity.

        " Loop through child nodes of <errordetail>
        lo_child = lo_errordetail->get_first_child( ).
        WHILE lo_child IS NOT INITIAL.
          IF lo_child->get_type( ) = if_ixml_node=>co_node_element.
            CASE lo_child->get_name( ).
              WHEN 'code'.
                lv_code = lo_child->get_value( ).
              WHEN 'message'.
                lv_message = lo_child->get_value( ).
              WHEN 'severity'.
                lv_severity = lo_child->get_value( ).
            ENDCASE.
          ENDIF.
          lo_child = lo_child->get_next( ).
        ENDWHILE.
        IF lv_code IS NOT INITIAL.
          IF iv_method = 'GET'.
            cs_out-get_msg = |{ lv_code } - { lv_message }|.
            cs_out-severity = lv_severity.
            EXIT.
          ELSE.
            cs_out-post_msg = |{ lv_code } - { lv_message }|.
            cs_out-severity = lv_severity.
            EXIT.
          ENDIF.
        ENDIF.
      ENDIF.
      lo_node = lo_node->get_next( ).
    ENDWHILE.
  ENDMETHOD.

ENDCLASS.


START-OF-SELECTION.
  "=====================================================================
  " Start of Selection
  "=====================================================================
  DATA(lo_main) = NEW lcl_main( ).

  lo_main->execute(
    iv_surl  = p_surl
    iv_suser = p_suser
    iv_spwd  = p_spwd
    iv_durl  = p_durl
    iv_duser = p_duser
    iv_dpwd  = p_dpwd ).

  TRY.
      CALL METHOD cl_salv_table=>factory
        IMPORTING
          r_salv_table = DATA(lo_alv)
        CHANGING
          t_table      = lo_main->mv_out.
      DATA(lo_display) = lo_alv->get_columns( ).
      lo_display->set_optimize( abap_true ).
      lo_display->get_column( 'GET_MSG' )->set_short_text( 'GETMethod' ).
      lo_display->get_column( 'GET_MSG' )->set_long_text( 'GETMethod' ).
      lo_display->get_column( 'GET_MSG' )->set_medium_text( 'GETMethod' ).
      lo_display->get_column( 'POST_MSG' )->set_short_text( 'POSTMethod' ).
      lo_display->get_column( 'POST_MSG' )->set_long_text( 'POSTMethod' ).
      lo_display->get_column( 'POST_MSG' )->set_medium_text( 'POSTMethod' ).
      lo_display->get_column( 'SEVERITY' )->set_short_text( 'Type' ).
      lo_display->get_column( 'SEVERITY' )->set_long_text( 'Type' ).
      lo_display->get_column( 'SEVERITY' )->set_medium_text( 'Type' ).
      lo_display->get_column( 'ENTITY_SET' )->set_short_text( 'Entity' ).
      lo_display->get_column( 'ENTITY_SET' )->set_long_text( 'Entity' ).
      lo_display->get_column( 'ENTITY_SET' )->set_medium_text( 'Entity' ).
      " Color by severity
      DATA(lo_colors) = lo_alv->get_display_settings( ).
      lo_colors->set_striped_pattern( abap_true ).

      DATA(lo_styles) = lo_alv->get_selections( ).

      lo_alv->display( ).
    CATCH cx_salv_msg INTO DATA(lx_alv).
      WRITE: / lx_alv->get_text( ).
  ENDTRY.
